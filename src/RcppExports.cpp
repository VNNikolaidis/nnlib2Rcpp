// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Autoencoder
NumericMatrix Autoencoder(NumericMatrix data_in, int desired_new_dimension, int number_of_training_epochs, double learning_rate, int num_hidden_layers, int hidden_layer_size, bool show_nn, std::string error_type, double acceptable_error_level, int display_rate);
RcppExport SEXP _nnlib2Rcpp_Autoencoder(SEXP data_inSEXP, SEXP desired_new_dimensionSEXP, SEXP number_of_training_epochsSEXP, SEXP learning_rateSEXP, SEXP num_hidden_layersSEXP, SEXP hidden_layer_sizeSEXP, SEXP show_nnSEXP, SEXP error_typeSEXP, SEXP acceptable_error_levelSEXP, SEXP display_rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data_in(data_inSEXP);
    Rcpp::traits::input_parameter< int >::type desired_new_dimension(desired_new_dimensionSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_training_epochs(number_of_training_epochsSEXP);
    Rcpp::traits::input_parameter< double >::type learning_rate(learning_rateSEXP);
    Rcpp::traits::input_parameter< int >::type num_hidden_layers(num_hidden_layersSEXP);
    Rcpp::traits::input_parameter< int >::type hidden_layer_size(hidden_layer_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type show_nn(show_nnSEXP);
    Rcpp::traits::input_parameter< std::string >::type error_type(error_typeSEXP);
    Rcpp::traits::input_parameter< double >::type acceptable_error_level(acceptable_error_levelSEXP);
    Rcpp::traits::input_parameter< int >::type display_rate(display_rateSEXP);
    rcpp_result_gen = Rcpp::wrap(Autoencoder(data_in, desired_new_dimension, number_of_training_epochs, learning_rate, num_hidden_layers, hidden_layer_size, show_nn, error_type, acceptable_error_level, display_rate));
    return rcpp_result_gen;
END_RCPP
}
// LVQu
IntegerVector LVQu(NumericMatrix data, int max_number_of_desired_clusters, int number_of_training_epochs, int neighborhood_size, bool show_nn);
RcppExport SEXP _nnlib2Rcpp_LVQu(SEXP dataSEXP, SEXP max_number_of_desired_clustersSEXP, SEXP number_of_training_epochsSEXP, SEXP neighborhood_sizeSEXP, SEXP show_nnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type max_number_of_desired_clusters(max_number_of_desired_clustersSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_training_epochs(number_of_training_epochsSEXP);
    Rcpp::traits::input_parameter< int >::type neighborhood_size(neighborhood_sizeSEXP);
    Rcpp::traits::input_parameter< bool >::type show_nn(show_nnSEXP);
    rcpp_result_gen = Rcpp::wrap(LVQu(data, max_number_of_desired_clusters, number_of_training_epochs, neighborhood_size, show_nn));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_class_BP();
RcppExport SEXP _rcpp_module_boot_class_LVQs();
RcppExport SEXP _rcpp_module_boot_class_MAM();
RcppExport SEXP _rcpp_module_boot_class_NN();

static const R_CallMethodDef CallEntries[] = {
    {"_nnlib2Rcpp_Autoencoder", (DL_FUNC) &_nnlib2Rcpp_Autoencoder, 10},
    {"_nnlib2Rcpp_LVQu", (DL_FUNC) &_nnlib2Rcpp_LVQu, 5},
    {"_rcpp_module_boot_class_BP", (DL_FUNC) &_rcpp_module_boot_class_BP, 0},
    {"_rcpp_module_boot_class_LVQs", (DL_FUNC) &_rcpp_module_boot_class_LVQs, 0},
    {"_rcpp_module_boot_class_MAM", (DL_FUNC) &_rcpp_module_boot_class_MAM, 0},
    {"_rcpp_module_boot_class_NN", (DL_FUNC) &_rcpp_module_boot_class_NN, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_nnlib2Rcpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
